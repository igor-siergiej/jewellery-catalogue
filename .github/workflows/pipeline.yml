name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: [self-hosted, linux, x64]
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Enable Corepack
        run: corepack enable

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set semantic version
        id: version
        run: |
          # Get the latest version from git tags
          LATEST_VERSION=$(git tag --sort=-version:refname | head -n1)
          
          # If no tags exist, start with 0.1.0
          if [ -z "$LATEST_VERSION" ]; then
            LATEST_VERSION="0.1.0"
          fi
          
          # Parse major, minor, patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          
          # Check commit message for version bump indicators
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          if [[ "$COMMIT_MSG" == *"[major]"* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$COMMIT_MSG" == *"[minor]"* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$COMMIT_MSG" == *"[patch]"* ]] || [[ "$COMMIT_MSG" == *"[fix]"* ]]; then
            PATCH=$((PATCH + 1))
          else
            # Default to patch increment
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Previous version: $LATEST_VERSION"
          echo "New version: $NEW_VERSION"

      - name: Install dependencies
        run: yarn install --immutable

  lint:
    runs-on: [self-hosted, linux, x64]
    needs: setup
    steps:
      - name: Enable Corepack
        run: corepack enable

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: yarn install --immutable

      - name: Lint code
        run: yarn eslint . 

      - name: Type check
        run: yarn tsc --noEmit

  build-api:
    runs-on: [self-hosted, linux, x64]
    needs: [setup, lint]
    steps:
      - name: Enable Corepack
        run: corepack enable

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and push jewellery-catalogue-api
        run: |
          docker build -f packages/api/Dockerfile -t 192.168.68.54:31834/jewellery-catalogue-api:${{ needs.setup.outputs.version }} -t 192.168.68.54:31834/jewellery-catalogue-api:latest .
          docker push 192.168.68.54:31834/jewellery-catalogue-api:${{ needs.setup.outputs.version }}
          docker push 192.168.68.54:31834/jewellery-catalogue-api:latest

  build-web:
    runs-on: [self-hosted, linux, x64]
    needs: [setup, lint]
    steps:
      - name: Enable Corepack
        run: corepack enable

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and push jewellery-catalogue-web
        run: |
          docker build -f packages/web/Dockerfile -t 192.168.68.54:31834/jewellery-catalogue-web:${{ needs.setup.outputs.version }} -t 192.168.68.54:31834/jewellery-catalogue-web:latest .
          docker push 192.168.68.54:31834/jewellery-catalogue-web:${{ needs.setup.outputs.version }}
          docker push 192.168.68.54:31834/jewellery-catalogue-web:latest

  push-tag:
    runs-on: [self-hosted, linux, x64]
    needs: [setup, build-api, build-web]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Enable Corepack
        run: corepack enable

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Create git tag
        run: |
          git config --global user.email "jewellery-catalogue-bot@users.noreply.github.com"
          git config --global user.name "jewellery-catalogue-bot"
          git tag ${{ needs.setup.outputs.version }}
          git push origin ${{ needs.setup.outputs.version }}

      - name: Update ArgoCD GitOps
        run: |
          # Clone the argonaut repository
          git clone https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/igor-siergiej/argonaut.git argonaut-repo
          cd argonaut-repo
          
          # Configure git
          git config user.email "argonaut-bot@users.noreply.github.com"
          git config user.name "argonaut-bot"
          
          # Update the staging deployment with new image versions
          sed -i "s|192.168.68.54:31834/jewellery-catalogue-api:.*|192.168.68.54:31834/jewellery-catalogue-api:${{ needs.setup.outputs.version }}|g" apps/jewellery-catalogue/overlays/staging/patch-deployment.yaml
          sed -i "s|192.168.68.54:31834/jewellery-catalogue-web:.*|192.168.68.54:31834/jewellery-catalogue-web:${{ needs.setup.outputs.version }}|g" apps/jewellery-catalogue/overlays/staging/patch-deployment.yaml
          
          # Commit and push changes
          git add apps/jewellery-catalogue/overlays/staging/patch-deployment.yaml
          git commit -m "Update jewellery-catalogue staging to version ${{ needs.setup.outputs.version }}"
          git push origin main


